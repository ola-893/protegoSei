syntax = "proto3";

package centrium;

service CentriumService {
    // Moderation RPCs
    rpc AddModToTribunal (PrincipalRequest) returns (BoolResponse);
    rpc SetMod (PrincipalRequest) returns (Empty);
    rpc IsMod (PrincipalRequest) returns (BoolResponse);
    rpc GetMods (Empty) returns (UserProfileList);

    // Profile RPCs
    rpc CreateProfile (CreateProfileRequest) returns (BoolResponse);
    rpc GetProfile (TextRequest) returns (UserProfile);
    rpc GetProfileByPrincipal (PrincipalRequest) returns (UserProfile);
    rpc GetSelf (Empty) returns (UserProfile);
    rpc Whoami (Empty) returns (PrincipalResponse);
    rpc GetAllUsers (Empty) returns (UserProfileList);
    rpc CountAllUsers (Empty) returns (Uint32Response);

    // Squad RPCs
    rpc CreateSquad (CreateSquadRequest) returns (BoolResponse);
    rpc GetSquad (TextRequest) returns (Squad);
    rpc GetAllSquad (Empty) returns (SquadList);
    rpc CountAllSquad (Empty) returns (Uint32Response);
    rpc AddToSquad (AddSquadMemberRequest) returns (Empty);
    rpc JoinSquad (AddSquadMemberRequest) returns (Empty);
    rpc LeaveOrRemoveSquadMember (RemoveSquadMemberRequest) returns (Empty);
    rpc OpenSquad (ManageSquadRequest) returns (Empty);
    rpc CloseSquad (ManageSquadRequest) returns (Empty);
    rpc UpdateSquadDetails (TextRequest) returns (Empty);

    // Tournament RPCs
    rpc CreateTournament (TournamentAccount) returns (BoolResponse);
    rpc GetTournament (TextRequest) returns (TournamentAccount);
    rpc GetAllTournament (Empty) returns (TournamentAccountList);
    rpc CountAllTournament (Empty) returns (Uint32Response);
    rpc StartTournament (TextRequest) returns (Empty);
    rpc EndTournament (EndTournamentRequest) returns (BoolResponse);
    rpc EndBlitzkriegTournament (EndBlitzkriegRequest) returns (BoolResponse);
    rpc ArchiveTournament (TextRequest) returns (Empty);
    rpc PostponeTournament (PostponeRequest) returns (Empty);
    rpc UpdateTournamentDetails (UpdateTournamentRequest) returns (Empty);
    rpc UpdateTournamentPoolPrice (UpdatePoolPriceRequest) returns (Empty);
    rpc UpdateTournamentTypeToBlitzkrieg (TextRequest) returns (Empty);
    rpc UpdateTournamentPastLeaderboard (Empty) returns (Empty);

    // Lobby RPCs
    rpc GetLobbyFromTournament (GetLobbyRequest) returns (LobbyAccount);
    rpc GetAllTournamentLobbies (TextRequest) returns (LobbyAccountList);
    rpc CountTournamentLobbies (TextRequest) returns (Uint32Response);
    rpc StructureTournamentIntoLobbies (TextRequest) returns (Empty);
    rpc StructureTournamentIntoSquadLobbies (StructureSquadLobbiesRequest) returns (Empty);
    rpc StructureTournamentIntoDuoLobbies (StructureDuoLobbiesRequest) returns (Empty);
    rpc CreateNewLobbiesFromWinners (TextRequest) returns (BoolResponse);
    rpc TwoLobbiesMerge (TextRequest) returns (Empty);
    rpc ThreeLobbiesMerge (TextRequest) returns (Empty);
    rpc LobbiesExterminator (TextRequest) returns (Empty);

    // Wager RPCs
    rpc AddOrIncreaseTournamentWager (AddWagerRequest) returns (Empty);
    rpc GetWager (GetWagerRequest) returns (WagerResponse);
    rpc GetAllWagers (TextRequest) returns (WagerList);
    rpc DoesWagerExist (GetWagerRequest) returns (BoolResponse);
    rpc ExpectedWagerReward (GetWagerRequest) returns (Uint64List);

    // Points RPCs
    rpc AssignPoints (AssignPointsRequest) returns (Empty);
    rpc AssignSoloPoints (AssignSoloPointsRequest) returns (BoolResponse);
    rpc AssignSquadPoints (AssignSquadPointsRequest) returns (BoolResponse);
    rpc CleanseAllSoloTypeTournamentBranchingTribunalPoints (TextRequest) returns (BoolResponse);
    rpc CleanseAllSquadTypeTournamentBranchingTribunalPoints (TextRequest) returns (BoolResponse);

    // Leaderboard RPCs
    rpc GetLeaderboard (Empty) returns (ContestantList);

    // Chat RPCs
    rpc SendMessageTournament (TournamentChatRequest) returns (Empty);

    // Referral RPCs
    rpc CountAllReferral (TextRequest) returns (Uint32Response);

    // Participation RPCs
    rpc JoinTournament (JoinTournamentRequest) returns (Empty);
    rpc JoinTournamentWithSquad (JoinTournamentWithSquadRequest) returns (Empty);
}

// ========== Request/Response Messages ==========

message PrincipalRequest {
    string principal = 1;
}

message TextRequest {
    string text = 1;
}

message BoolResponse {
    bool value = 1;
}

message Uint32Response {
    uint32 value = 1;
}

message Uint64List {
    repeated uint64 values = 1;
}

message PrincipalResponse {
    string principal = 1;
}

message Empty {}

message UserProfileList {
    repeated UserProfile profiles = 1;
}

message SquadList {
    repeated Squad squads = 1;
}

message TournamentAccountList {
    repeated TournamentAccount tournaments = 1;
}

message LobbyAccountList {
    repeated LobbyAccount lobbies = 1;
}

message WagerList {
    repeated Wager wagers = 1;
}

message ContestantList {
    repeated Contestant contestants = 1;
}

message CreateProfileRequest {
    UserProfile profile = 1;
    string principal = 2;
}

message CreateSquadRequest {
    Squad squad = 1;
    string principal = 2;
}

message AddSquadMemberRequest {
    Member member = 1;
    string principal = 2;
    string squad_id = 3;
}

message RemoveSquadMemberRequest {
    string principal = 1;
    string squad_id = 2;
}

message ManageSquadRequest {
    string squad_id = 1;
    string principal = 2;
}

message EndTournamentRequest {
    string tournament_id = 1;
    string principal = 2;
    uint32 no_of_winners = 3;
    repeated Winner winners = 4;
}

message EndBlitzkriegRequest {
    string tournament_id = 1;
    string principal = 2;
}

message PostponeRequest {
    string tournament_id = 1;
    string new_date = 2;
}

message UpdateTournamentRequest {
    string tournament_id = 1;
    string details = 2;
}

message UpdatePoolPriceRequest {
    string tournament_id = 1;
    uint64 new_price = 2;
}

message GetLobbyRequest {
    string tournament_id = 1;
    uint32 lobby_idx = 2;
}

message StructureSquadLobbiesRequest {
    string tournament_id = 1;
    string squad_size = 2;
}

message StructureDuoLobbiesRequest {
    string tournament_id = 1;
    string pairing_strategy = 2;
}

message AddWagerRequest {
    string tournament_id = 1;
    Wager wager = 2;
}

message GetWagerRequest {
    string tournament_id = 1;
    string wager_id = 2;
}

message WagerResponse {
    optional Wager wager = 1;
}

message AssignPointsRequest {
    string principal = 1;
    PointEntry points = 2;
}

message AssignSoloPointsRequest {
    string tournament_id = 1;
    repeated PointEntry points = 2;
    string principal = 3;
}

message AssignSquadPointsRequest {
    string tournament_id = 1;
    repeated PointEntry points = 2;
    string principal = 3;
}

message TournamentChatRequest {
    string tournament_id = 1;
    Chat message = 2;
}

message JoinTournamentRequest {
    string tournament_id = 1;
    string user_id = 2;
    InGameNameEntry in_game_name = 3;
}

message JoinTournamentWithSquadRequest {
    string tournament_id = 1;
    string squad_id = 2;
    repeated InGameNameEntry squad_in_game_names = 3;
//    optional repeated InGameNameEntry substitutes = 4;
}

// ========== Core Models ==========
message UserProfile {
    string id_hash = 1;
    uint32 age = 2;
    string date = 3;
    Status status = 4;
    uint32 wins = 5;
    optional uint32 attendance = 6;
    optional uint32 losses = 7;
    uint32 tournaments_created = 8;
    repeated PointEntry points = 9;
    string username = 10;
    repeated string tournaments = 11;
    bool is_mod = 12;
    optional UserMode usermode = 13;
    optional uint64 earnings = 14; // u128 represented as string in practice
    optional Role role = 15;
    string principal_id = 16;
    string account_id = 17;
    string canister_id = 18;
    string squad_badge = 19;
    optional string referral_id = 20;
}

message TournamentAccount {
    string id_hash = 1;
    string creator = 2;
    optional string creator_id = 3;
    TournamentStatus status = 4;
    uint32 idx = 5;
    optional string creator_principal = 6;

    optional bool is_private = 7;
    repeated string moderators = 8;
    optional PayoutDistribution payout_distribution = 9;
    optional string external_link = 10;
    optional TournamentMeta metadata = 11;
    optional bool is_team_based = 12;
    optional TeamType team_size = 13;
    repeated Team teams = 14;
    optional uint64 max_teams = 15;
    optional bool allow_solo_players = 16;
    optional bool allow_auto_match = 17;

    string starting_date = 18;
    string tournament_rules = 19;
    TournamentType tournament_type = 20;
    string game = 21;
    repeated Squad squad = 22;
    repeated SquadInGameNames squad_in_game_names = 23;
    repeated Chat messages = 24;
    repeated string user = 25;
    repeated string referal_ids = 26;
    repeated UserProfile user_details = 27;
    repeated string winers = 28;

    uint32 entry_prize = 29;
    optional bool accepts_wagers = 30;

    repeated Wager wagers = 31;
    optional uint64 entry_fee = 32;
    optional uint64 nominal_entry_fee = 33;
    optional uint64 entry_fee_bump = 34;
    optional uint64 no_of_participants_at_bump = 35;
    uint64 total_prize = 36;
    uint32 no_of_winners = 37;
    optional Variation tournament_variation = 38;
    uint64 no_of_participants = 39;
    string game_type = 40;
    string end_date = 41;
    string title = 42;

    repeated PointEntry squad_points = 43;
    repeated PointEntry points = 44;
    repeated PointEntry squad_vector_mod_1 = 45;
    repeated PointEntry points_vector_mod_1 = 46;
    repeated PointEntry squad_vector_mod_2 = 47;
    repeated PointEntry points_vector_mod_2 = 48;
    repeated PointEntry squad_vector_mod_3 = 49;
    repeated PointEntry points_vector_mod_3 = 50;
    repeated InGameNameEntry in_game_names = 51;
    optional TournamentLobbyType tournament_lobby_type = 52;
    repeated LobbyAccount lobbies = 53;
    repeated Winner winners = 54;
    optional bool ended = 55;
}

// ========== Supporting Messages ==========
message PointEntry {
    string key1 = 1;
    string key2 = 2;
    Point point = 3;
}

message InGameNameEntry {
    string key1 = 1;
    string key2 = 2;
    string value = 3;
}

message SquadInGameNames {
    repeated InGameNameEntry entries = 1;
}

message Winner {
    string position = 1;
    uint64 amount = 2;
    string user_account = 3;
}

message LobbyAccount {
    TournamentStatus status = 1;
    LobbyStatus lobby_status = 2;
    uint32 idx = 3;
    optional string starting_date = 4;
    string lobby_rules = 5;
    TournamentType tournament_type = 6;
    string game = 7;
    repeated Squad squads = 8;
    repeated Chat messages = 9;
    repeated string participants = 10;
    repeated string winers = 11;
    optional uint32 no_of_winners = 12;
    uint64 no_of_participants = 13;
    GameType game_type = 14;
    optional string name = 15;
}

message Point {
    uint64 position_points = 1;
    uint64 kill_points = 2;
    uint64 total_points = 3;
}

message Squad {
    string id_hash = 1;
    string captain = 2;
    SquadType status = 3;
    string name = 4;
    string tag = 5;
    optional uint32 wins = 6;
    optional uint32 attendance = 7;
    optional uint32 losses = 8;
    repeated Member members = 9;
    ParticipatingMember participating_members = 10;
    repeated string requests = 11;
    repeated PointEntry points = 12;
    optional string created_at = 13;
    optional string created_by = 14;
}

message ParticipatingMember {
    string tournament_id = 1;
    repeated Member participating_squad_members = 2;
}

message Member {
    string name = 1;
    string principal_id = 2;
}

message Wager {
    uint64 amount = 1;
    string staker_principal_id = 2;
    string staker_account_id = 3;
    string player_principal_id = 4;
}

message Chat {
    string name = 1;
    string id = 2;
    string time = 3;
    string message = 4;
}

message Contestant {
    string name = 1;
    uint64 point = 2;
    uint32 wins = 3;
    uint32 losses = 4;
}

message PayoutDistribution {
    uint64 winner = 1;
    uint64 creator = 2;
    uint64 platform = 3;
}

message TournamentMeta {
    string start_time = 1;
    string end_time = 2;
    uint64 prize_pool = 3;
    uint64 winning_prize = 4;
    optional string stream_url = 5;
    string description = 6;
    optional string tournament_banner = 7;
    repeated string tags = 8;
}

message Team {
    string id = 1;
    string name = 2;
    repeated string members = 3;
    string captain = 4;
    string created_at = 5;
    optional string metadata = 6;
}

message Notification {
    uint64 id = 1;
    string title = 2;
    string body = 3;
    string user = 4;
    string username = 5;
    string date = 6;
    bool read = 7;
}

message Notifications {
    repeated Notification notifications = 1;
    string user = 2;
}

// ========== Enums ==========
enum Status {
    ONLINE = 0;
    OFFLINE = 1;
    AWAY = 2;
}

enum Role {
    PLAYER = 0;
    MOD = 1;
    TRIBUNAL_MOD = 2;
}

enum ModTag {
    MOD1 = 0;
    MOD2 = 1;
    MOD3 = 2;
}

enum GameType {
    ONEVONE = 0;
    TEAMVTEAM = 1;
    SINGLE = 2;
    DUO = 3;
    SQUAD = 4;
}

enum TournamentStatus {
    ACCEPTING_PLAYERS = 0;
    GAME_IN_PROGRESS = 1;
    GAME_COMPLETED = 2;
    ARCHIVED = 3;
}

enum LobbyStatus {
    READY_TO_START = 0;
    GAME_IN_PROGRESS = 1;
    GAME_COMPLETED = 2;
}

enum TournamentType {
    CROWDFUNDED = 0;
    PREPAID = 1;
    BLITZKRIEG = 2;
}

enum TournamentLobbyType {
    SINGLE_LOBBY = 0;
    MULTI_LOBBY = 1;
}

enum SquadType {
    OPEN = 0;
    CLOSED = 1;
}

enum UserMode {
    BASE = 0;
    CREATOR = 1;
    MODERATOR = 2;
}

enum Variation {
    CAPPED = 0;
    INFINITE = 1;
}

enum TeamType {
    DUO = 0;
    SQUAD = 1;
    SOLO = 2;
}

//enum OperationResult {
//    OK = 0;
//    ERR = 1;
//}

enum ErrorMessage {
    NOT_AUTHORIZED = 0;
    DOES_NOT_EXIST = 1;
    EXPIRED = 2;
    WRONG_CREDENTIALS = 3;
    NOT_ALLOWED = 4;
    NOT_ENOUGH_BALANCE = 5;
    NOT_ELIGIBLE = 6;
}